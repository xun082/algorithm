/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function (l1, l2) {
  let dummy = new ListNode(null),
    cur = dummy,
    carry = 0;
  while (l1 != null || l2 != null) {
    const l1Val = l1 != null ? l1.val : 0;
    const l2Val = l2 != null ? l2.val : 0;
    const sumVal = carry + l1Val + l2Val;
    //取整除数，不仅消除要超过10以上的数值影响，还可以判断是否要进一位到sumVal
    carry = Math.floor(sumVal / 10);
    //取余数作为链表的下一个节点
    cur.next = new ListNode(sumVal % 10);
    //cur向右移动
    cur = cur.next;

    if (l1) {
      l1 = l1.next;
    }
    if (l2) {
      l2 = l2.next;
    }
    //如果最后溢出1的话，就添加为1的节点即可。
    if (carry > 0) {
      cur.next = new ListNode(carry);
    }
  }
  return dummy.next;
};
